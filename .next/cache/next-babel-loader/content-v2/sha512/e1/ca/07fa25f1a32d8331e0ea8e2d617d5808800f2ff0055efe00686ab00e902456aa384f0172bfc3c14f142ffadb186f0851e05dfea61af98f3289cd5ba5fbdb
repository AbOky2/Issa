{"ast":null,"code":"var _jsxFileName = \"/usr/src/kit-le-nid/components/form/Upload.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultUserImage from '../../static/img/upload-image.png';\nimport { FormElementWrapper } from './formElement';\n\nconst UploadImageComp = ({\n  name,\n  value,\n  onChange,\n  label,\n  showLabel,\n  props\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    imageUpdated: false,\n    imagePreviewUrl: value || defaultUserImage\n  });\n\n  const handlePreview = (file, cb) => {\n    const reader = new FileReader();\n    if (!file) return;\n\n    reader.onloadend = () => {\n      if (cb) cb(reader.result);\n    };\n\n    if (file) reader.readAsDataURL(file);\n  };\n\n  const handleImageChange = e => {\n    e.preventDefault();\n    const file = e.target.files[0];\n    handlePreview(file, base66 => {\n      setState({\n        imagePreviewUrl: base66,\n        imageUpdated: true\n      });\n      onChange && onChange(file);\n    });\n  };\n\n  let {\n    imagePreviewUrl,\n    imageUpdated\n  } = state;\n  if (value && imageUpdated && typeof value === 'string') imagePreviewUrl = value;\n  return __jsx(FormElementWrapper, {\n    label: label,\n    showLabel: showLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"upload inline-block relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: imagePreviewUrl,\n    className: \"upload-src\",\n    alt: \"...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }), __jsx(\"input\", {\n    type: \"file\",\n    name: name,\n    onChange: e => handleImageChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  })), !showLabel && __jsx(\"h6\", {\n    className: \"inline-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 24\n    }\n  }, label)));\n};\n\nUploadImageComp.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.any,\n  onChange: PropTypes.func.isRequired,\n  showLabel: PropTypes.bool,\n  label: PropTypes.string\n};\nexport default UploadImageComp;","map":{"version":3,"sources":["/usr/src/kit-le-nid/components/form/Upload.js"],"names":["React","useState","PropTypes","defaultUserImage","FormElementWrapper","UploadImageComp","name","value","onChange","label","showLabel","props","state","setState","imageUpdated","imagePreviewUrl","handlePreview","file","cb","reader","FileReader","onloadend","result","readAsDataURL","handleImageChange","e","preventDefault","target","files","base66","propTypes","string","isRequired","any","func","bool"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultUserImage from '../../static/img/upload-image.png';\nimport { FormElementWrapper } from './formElement';\n\nconst UploadImageComp = ({ name, value, onChange, label, showLabel, props }) => {\n  const [state, setState] = useState({\n    imageUpdated: false,\n    imagePreviewUrl: value || defaultUserImage,\n  });\n  const handlePreview = (file, cb) => {\n    const reader = new FileReader();\n\n    if (!file) return;\n\n    reader.onloadend = () => {\n      if (cb) cb(reader.result);\n    };\n    if (file) reader.readAsDataURL(file);\n  };\n  const handleImageChange = (e) => {\n    e.preventDefault();\n    const file = e.target.files[0];\n\n    handlePreview(file, (base66) => {\n      setState({ imagePreviewUrl: base66, imageUpdated: true });\n      onChange && onChange(file);\n    });\n  };\n\n  let { imagePreviewUrl, imageUpdated } = state;\n\n  if (value && imageUpdated && typeof value === 'string') imagePreviewUrl = value;\n\n  return (\n    <FormElementWrapper label={label} showLabel={showLabel}>\n      <div {...props}>\n        <div className=\"upload inline-block relative\">\n          <img src={imagePreviewUrl} className=\"upload-src\" alt=\"...\" />\n          <input type=\"file\" name={name} onChange={(e) => handleImageChange(e)} />\n        </div>\n        {!showLabel && <h6 className=\"inline-block\">{label}</h6>}\n      </div>\n    </FormElementWrapper>\n  );\n};\n\nUploadImageComp.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.any,\n  onChange: PropTypes.func.isRequired,\n  showLabel: PropTypes.bool,\n  label: PropTypes.string,\n};\nexport default UploadImageComp;\n"]},"metadata":{},"sourceType":"module"}