{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Upload from '../../form/Upload';\nimport { partnerTypes, partnerTypeListKeys } from '../../../helpers/partner';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    formControl: {\n      // margin: theme.spacing(1),\n      width: '100%'\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    },\n    divider: {\n      marginTop: theme.spacing(4)\n    }\n  };\n});\n\nvar Second = function Second(_ref) {\n  var _onChange = _ref.onChange,\n      _ref$values = _ref.values,\n      values = _ref$values === void 0 ? {} : _ref$values;\n  var classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"text-center\"\n  }, __jsx(\"span\", {\n    className: \"custom-upload-conatainer\"\n  }, \"Logo\"), __jsx(Upload, {\n    name: \"picture\",\n    value: values === null || values === void 0 ? void 0 : values.picture,\n    onChange: _onChange('picture')\n  })), __jsx(\"div\", null, __jsx(\"span\", null, \"Url\"), __jsx(TextField, {\n    name: \"link\",\n    margin: \"none\",\n    value: values === null || values === void 0 ? void 0 : values.link,\n    onChange: function onChange(e) {\n      return _onChange('link')(e.target.value);\n    },\n    required: true,\n    fullWidth: true,\n    InputLabelProps: {\n      shrink: true\n    }\n  })), __jsx(\"div\", {\n    className: classes.divider\n  }, __jsx(\"div\", {\n    className: classes.formControl\n  }, __jsx(\"span\", null, \"Type\"), __jsx(Select, {\n    fullWidth: true,\n    value: values.type // onChange={onChange}\n    ,\n    onChange: function onChange(e) {\n      return _onChange('type')(e.target.value);\n    },\n    inputProps: {\n      name: 'type',\n      id: 'type-native-simple'\n    }\n  }, __jsx(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\"\n  }), partnerTypeListKeys.map(function (elem) {\n    return __jsx(\"option\", {\n      key: elem,\n      value: elem\n    }, partnerTypes[elem]);\n  })))));\n};\n\nexport default Second;","map":null,"metadata":{},"sourceType":"module"}