{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst Admin = 'admin';\nconst Roomer = 'roomer';\nconst Buyer = 'buyer';\nconst Student = 'student';\nconst studentRoleList = [Student, Buyer];\nconst RoleList = [Admin, ...studentRoleList]; // status\n\nconst Active = 'active';\nconst Inactive = 'inactive';\nconst StatusList = [Active, Inactive]; // Methods\n\nconst isAdmin = user => user && user.role === Admin;\n\nconst isStudent = user => user && studentRoleList.includes(user.role);\n\nconst isBuyer = user => user && user.role === Buyer;\n\nconst isRoomer = user => user && user.role === Roomer; // Other\n\n\nconst buyStrategy = 'buy';\nconst locationStrategy = 'location';\nconst guarantorStrategy = 'guarantor';\nconst strategyTypeKeys = {\n  [buyStrategy]: 'Achat',\n  [locationStrategy]: 'Location',\n  [guarantorStrategy]: 'garant'\n}; // Slug\n\nconst slugify = slug => {\n  let str = slug;\n  str = str.replace(/^\\s+|\\s+$/g, '');\n  str = str.toLowerCase();\n  const from = 'àáäâèéëêìíïîòóöôùúüûñç·/_,:;';\n  const to = 'aaaaeeeeiiiioooouuuunc------';\n\n  for (let i = 0, l = from.length; i < l; i += 1) str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\n\n  str = str.replace(/[^a-z0-9 -]/g, '').replace(/\\s+/g, '-').replace(/-+/g, '-');\n  return str;\n};\n\nconst createUniqueSlug = async (Model, slug, count) => {\n  const user = await Model.findOne({\n    slug: `${slug}-${count}`\n  }, 'id');\n  if (!user) return `${slug}-${count}`;\n  return createUniqueSlug(Model, slug, count + 1);\n};\n\nconst generateSlug = async (Model, name, filter = {}) => {\n  const origSlug = slugify(name);\n  const user = await Model.findOne(_objectSpread({\n    slug: origSlug\n  }, filter), 'id');\n\n  if (!user) {\n    return origSlug;\n  }\n\n  return createUniqueSlug(Model, origSlug, 1);\n};\n\nconst isValidateEmail = email => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n\nconst ucFirst = string => string.charAt(0).toUpperCase() + string.slice(1);\n\nmodule.exports = {\n  // Vars\n  Admin,\n  Student,\n  Buyer,\n  Roomer,\n  Active,\n  Inactive,\n  RoleList,\n  StatusList,\n  studentRoleList,\n  strategyTypeKeys,\n  buyStrategy,\n  locationStrategy,\n  guarantorStrategy,\n  // Methods\n  ucFirst,\n  isValidateEmail,\n  isAdmin,\n  isStudent,\n  isBuyer,\n  generateSlug,\n  isRoomer\n};","map":null,"metadata":{},"sourceType":"script"}