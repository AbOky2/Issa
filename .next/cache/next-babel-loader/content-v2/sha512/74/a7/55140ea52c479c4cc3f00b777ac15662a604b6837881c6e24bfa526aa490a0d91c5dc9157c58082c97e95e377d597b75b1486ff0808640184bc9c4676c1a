{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nconst labelDimension = {\n  xs: 6,\n  ms: 12\n};\nlet className;\nconst defaultDimension = {\n  xs: 12,\n  ms: 12\n};\n\nconst IconDisplay = ({\n  src,\n  fullIcon,\n  withGrayScaleIcon\n}) => __jsx(\"div\", {\n  className: \"jsx-568689068\" + \" \" + `${fullIcon ? 'fullIcon' : ''} ${withGrayScaleIcon ? 'withGrayScaleIcon' : ''}`\n}, __jsx(\"img\", {\n  src: src,\n  alt: \"\",\n  className: \"jsx-568689068\" + \" \" + \"elem-icon\"\n}), __jsx(_JSXStyle, {\n  id: \"568689068\"\n}, [\".fullIcon.jsx-568689068{width:100%;padding:5px;}\", \".fullIcon.jsx-568689068 img.jsx-568689068{display:block;width:100%;}\", \".withGrayScaleIcon.jsx-568689068 img.jsx-568689068{-webkit-filter:grayscale(1);filter:grayscale(1);}\"]));\n\nconst LableWrapper = (_ref) => {\n  let {\n    value,\n    label,\n    labelPosition = '',\n    icon,\n    fullIcon,\n    withGrayScaleIcon\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"value\", \"label\", \"labelPosition\", \"icon\", \"fullIcon\", \"withGrayScaleIcon\"]);\n\n  if (labelPosition.includes && labelPosition.includes('top')) labelDimension.xs = 12;\n  if (labelPosition.includes && labelPosition.includes('left')) className = 'text-left'; // for all mobile\n  // labelDimension.xs = 12\n\n  return __jsx(Grid, {\n    container: true,\n    justify: \"space-between\",\n    alignItems: \"center\",\n    alignContent: \"center\"\n  }, __jsx(Grid, _extends({\n    item: true\n  }, labelDimension, {\n    className: `label-container ${className}`\n  }), icon && __jsx(IconDisplay, {\n    src: icon,\n    fullIcon: fullIcon,\n    withGrayScaleIcon: withGrayScaleIcon && !value\n  }), __jsx(\"span\", {\n    className: \"form-label-container\",\n    style: _objectSpread({}, props.labelStyle)\n  }, label)), __jsx(Grid, _extends({\n    item: true\n  }, labelDimension), props.children));\n};\n\nconst FormElementWrapper = (_ref2) => {\n  let {\n    value,\n    showLabel = false,\n    icon,\n    fullIcon,\n    withGrayScaleIcon\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"value\", \"showLabel\", \"icon\", \"fullIcon\", \"withGrayScaleIcon\"]);\n\n  if (showLabel) return __jsx(LableWrapper, _extends({}, props, {\n    icon: icon\n  }));\n  return __jsx(Grid, _extends({\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    justify: \"space-between\"\n  }, defaultDimension), icon && __jsx(Grid, {\n    item: true,\n    xs: 1\n  }, icon && __jsx(IconDisplay, {\n    src: icon,\n    fullIcon: fullIcon,\n    withGrayScaleIcon: withGrayScaleIcon && !value\n  })), __jsx(Grid, {\n    item: true,\n    xs: icon ? 11 : 12,\n    className: icon ? 'input-icon-wrapper' : ''\n  }, props.children));\n};\n\nexport { FormElementWrapper };","map":null,"metadata":{},"sourceType":"module"}