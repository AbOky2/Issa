{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport defaultUserImage from '../../static/img/upload-image.png';\nimport { FormElementWrapper } from './formElement';\n\nconst UploadImageComp = ({\n  name,\n  value,\n  onChange,\n  label,\n  showLabel,\n  props\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    imageUpdated: false,\n    imagePreviewUrl: value || defaultUserImage\n  });\n\n  const handlePreview = (file, cb) => {\n    const reader = new FileReader();\n    if (!file) return;\n\n    reader.onloadend = () => {\n      if (cb) cb(reader.result);\n    };\n\n    if (file) reader.readAsDataURL(file);\n  };\n\n  const handleImageChange = e => {\n    e.preventDefault();\n    const file = e.target.files[0];\n    handlePreview(file, base66 => {\n      setState({\n        imagePreviewUrl: base66,\n        imageUpdated: true\n      });\n      onChange && onChange(file);\n    });\n  };\n\n  let {\n    imagePreviewUrl,\n    imageUpdated\n  } = state;\n  if (value && imageUpdated && typeof value === 'string') imagePreviewUrl = value;\n  return __jsx(FormElementWrapper, {\n    label: label,\n    showLabel: showLabel\n  }, __jsx(\"div\", props, __jsx(\"div\", {\n    className: \"upload inline-block relative\"\n  }, __jsx(\"img\", {\n    src: imagePreviewUrl,\n    className: \"upload-src\",\n    alt: \"...\"\n  }), __jsx(\"input\", {\n    type: \"file\",\n    name: name,\n    onChange: e => handleImageChange(e)\n  })), !showLabel && __jsx(\"h6\", {\n    className: \"inline-block\"\n  }, label)));\n};\n\nexport default UploadImageComp;","map":null,"metadata":{},"sourceType":"module"}