{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport 'isomorphic-unfetch';\n\nconst {\n  ROOT_URL\n} = require('../../config');\n\nexport default async function sendRequest(path, options = {}, extra) {\n  const headers = _objectSpread(_objectSpread({}, options.headers || {}), extra ? {} : {\n    'Content-type': 'application/json; charset=UTF-8'\n  });\n\n  const response = await fetch(`${ROOT_URL}${path}`, _objectSpread(_objectSpread({\n    method: 'POST',\n    credentials: 'same-origin'\n  }, options), {}, {\n    headers\n  }));\n  let data;\n\n  try {\n    data = await response.json();\n  } catch (error) {\n    throw new Error(error);\n  }\n\n  return data;\n}","map":null,"metadata":{},"sourceType":"module"}