{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Router from 'next/router';\nimport * as NProgress from 'nprogress';\nimport { StudentSidebarComp, AdminSidebarComp } from './AuthWrapper';\nRouter.events.on('routeChangeStart', () => {\n  NProgress.start();\n});\nRouter.events.on('routeChangeComplete', url => {\n  if (window && process.env.GA_MEASUREMENT_ID) {\n    window.gtag('config', process.env.GA_MEASUREMENT_ID, {\n      page_path: url\n    });\n  }\n\n  NProgress.done();\n});\nRouter.events.on('routeChangeError', () => NProgress.done());\nlet globalUser = null;\nexport default function withAuth(BaseComponent, {\n  loginRequired = true,\n  logoutRequired = false,\n  adminRequired = false\n} = {}) {\n  class App extends React.Component {\n    static async getInitialProps(ctx) {\n      const isFromServer = true;\n      const user = ctx.req ? ctx.req.user && ctx.req.user : globalUser;\n\n      if (isFromServer && user) {\n        user._id = user._id.toString();\n      }\n\n      const props = {\n        user,\n        isFromServer\n      };\n\n      if (BaseComponent.getInitialProps) {\n        Object.assign(props, (await BaseComponent.getInitialProps(ctx)) || {});\n      }\n\n      return props;\n    }\n\n    componentDidMount() {\n      const {\n        user,\n        isFromServer\n      } = this.props;\n\n      if (isFromServer) {\n        globalUser = user;\n      }\n\n      if (loginRequired && !logoutRequired && !user) {\n        Router.push('/public/login', '/login');\n        return;\n      }\n\n      if (adminRequired && (!user || !user.isAdmin)) {\n        Router.push('/customer/my-books', '/my-books');\n      }\n\n      if (logoutRequired && user) {\n        Router.push('/');\n      }\n    }\n\n    render() {\n      const {\n        user\n      } = this.props;\n\n      if (loginRequired && !logoutRequired && !user) {\n        return null;\n      }\n\n      if (adminRequired && (!user || !user.isAdmin)) {\n        return null;\n      }\n\n      if (logoutRequired && user) {\n        return null;\n      }\n\n      if (!user) return __jsx(BaseComponent, this.props);\n      if (user !== null && user !== void 0 && user.isAdmin || (user === null || user === void 0 ? void 0 : user.role) === 'admin') return __jsx(React.Fragment, null, __jsx(AdminSidebarComp, {\n        user: user\n      }, __jsx(BaseComponent, this.props)));\n      return __jsx(React.Fragment, null, __jsx(StudentSidebarComp, {\n        user: user\n      }, __jsx(BaseComponent, this.props)));\n    }\n\n  }\n\n  const propTypes = {\n    user: PropTypes.shape({\n      id: PropTypes.string,\n      isAdmin: PropTypes.bool\n    }),\n    isFromServer: PropTypes.bool.isRequired\n  };\n  const defaultProps = {\n    user: null\n  };\n  App.defaultProps = defaultProps;\n  return App;\n}","map":null,"metadata":{},"sourceType":"module"}