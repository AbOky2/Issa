{"ast":null,"code":"var _regeneratorRuntime = require(\"/usr/src/kit-le-nid/node_modules/next/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/usr/src/kit-le-nid/node_modules/next/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"/usr/src/kit-le-nid/node_modules/next/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _strategyTypeKeys;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Admin = 'admin';\nvar Roomer = 'roomer';\nvar Buyer = 'buyer';\nvar Student = 'student';\nvar studentRoleList = [Student, Buyer];\nvar RoleList = [Admin].concat(studentRoleList); // status\n\nvar Active = 'active';\nvar Inactive = 'inactive';\nvar StatusList = [Active, Inactive]; // Methods\n\nvar isAdmin = function isAdmin(user) {\n  return user && user.role === Admin;\n};\n\nvar isStudent = function isStudent(user) {\n  return user && studentRoleList.includes(user.role);\n};\n\nvar isBuyer = function isBuyer(user) {\n  return user && user.role === Buyer;\n};\n\nvar isRoomer = function isRoomer(user) {\n  return user && user.role === Roomer;\n}; // Other\n\n\nvar buyStrategy = 'buy';\nvar locationStrategy = 'location';\nvar guarantorStrategy = 'guarantor';\nvar strategyTypeKeys = (_strategyTypeKeys = {}, _defineProperty(_strategyTypeKeys, buyStrategy, 'Achat'), _defineProperty(_strategyTypeKeys, locationStrategy, 'Location'), _defineProperty(_strategyTypeKeys, guarantorStrategy, 'garant'), _strategyTypeKeys); // Slug\n\nvar slugify = function slugify(slug) {\n  var str = slug;\n  str = str.replace(/^\\s+|\\s+$/g, '');\n  str = str.toLowerCase();\n  var from = 'àáäâèéëêìíïîòóöôùúüûñç·/_,:;';\n  var to = 'aaaaeeeeiiiioooouuuunc------';\n\n  for (var i = 0, l = from.length; i < l; i += 1) {\n    str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\n  }\n\n  str = str.replace(/[^a-z0-9 -]/g, '').replace(/\\s+/g, '-').replace(/-+/g, '-');\n  return str;\n};\n\nvar createUniqueSlug = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(Model, slug, count) {\n    var user;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return Model.findOne({\n              slug: \"\".concat(slug, \"-\").concat(count)\n            }, 'id');\n\n          case 2:\n            user = _context.sent;\n\n            if (user) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", \"\".concat(slug, \"-\").concat(count));\n\n          case 5:\n            return _context.abrupt(\"return\", createUniqueSlug(Model, slug, count + 1));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function createUniqueSlug(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar generateSlug = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(Model, name) {\n    var filter,\n        origSlug,\n        user,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            filter = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            origSlug = slugify(name);\n            _context2.next = 4;\n            return Model.findOne(_objectSpread({\n              slug: origSlug\n            }, filter), 'id');\n\n          case 4:\n            user = _context2.sent;\n\n            if (user) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", origSlug);\n\n          case 7:\n            return _context2.abrupt(\"return\", createUniqueSlug(Model, origSlug, 1));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function generateSlug(_x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar isValidateEmail = function isValidateEmail(email) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n\nvar ucFirst = function ucFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nmodule.exports = {\n  // Vars\n  Admin: Admin,\n  Student: Student,\n  Buyer: Buyer,\n  Roomer: Roomer,\n  Active: Active,\n  Inactive: Inactive,\n  RoleList: RoleList,\n  StatusList: StatusList,\n  studentRoleList: studentRoleList,\n  strategyTypeKeys: strategyTypeKeys,\n  buyStrategy: buyStrategy,\n  locationStrategy: locationStrategy,\n  guarantorStrategy: guarantorStrategy,\n  // Methods\n  ucFirst: ucFirst,\n  isValidateEmail: isValidateEmail,\n  isAdmin: isAdmin,\n  isStudent: isStudent,\n  isBuyer: isBuyer,\n  generateSlug: generateSlug,\n  isRoomer: isRoomer\n};","map":{"version":3,"sources":["/usr/src/kit-le-nid/helpers/user.js"],"names":["Admin","Roomer","Buyer","Student","studentRoleList","RoleList","Active","Inactive","StatusList","isAdmin","user","role","isStudent","includes","isBuyer","isRoomer","buyStrategy","locationStrategy","guarantorStrategy","strategyTypeKeys","slugify","slug","str","replace","toLowerCase","from","to","i","l","length","RegExp","charAt","createUniqueSlug","Model","count","findOne","generateSlug","name","filter","origSlug","isValidateEmail","email","re","test","String","ucFirst","string","toUpperCase","slice","module","exports"],"mappings":"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","sourcesContent":["const Admin = 'admin';\nconst Roomer = 'roomer';\nconst Buyer = 'buyer';\nconst Student = 'student';\nconst studentRoleList = [Student, Buyer];\nconst RoleList = [Admin, ...studentRoleList];\n\n// status\nconst Active = 'active';\nconst Inactive = 'inactive';\nconst StatusList = [Active, Inactive];\n\n// Methods\nconst isAdmin = (user) => user && user.role === Admin;\nconst isStudent = (user) => user && studentRoleList.includes(user.role);\nconst isBuyer = (user) => user && user.role === Buyer;\nconst isRoomer = (user) => user && user.role === Roomer;\n\n// Other\nconst buyStrategy = 'buy';\nconst locationStrategy = 'location';\nconst guarantorStrategy = 'guarantor';\nconst strategyTypeKeys = {\n  [buyStrategy]: 'Achat',\n  [locationStrategy]: 'Location',\n  [guarantorStrategy]: 'garant',\n};\n// Slug\nconst slugify = (slug) => {\n  let str = slug;\n\n  str = str.replace(/^\\s+|\\s+$/g, '');\n  str = str.toLowerCase();\n\n  const from = 'àáäâèéëêìíïîòóöôùúüûñç·/_,:;';\n  const to = 'aaaaeeeeiiiioooouuuunc------';\n\n  for (let i = 0, l = from.length; i < l; i += 1)\n    str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\n\n  str = str\n    .replace(/[^a-z0-9 -]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-');\n\n  return str;\n};\n\nconst createUniqueSlug = async (Model, slug, count) => {\n  const user = await Model.findOne({ slug: `${slug}-${count}` }, 'id');\n\n  if (!user) return `${slug}-${count}`;\n\n  return createUniqueSlug(Model, slug, count + 1);\n};\n\nconst generateSlug = async (Model, name, filter = {}) => {\n  const origSlug = slugify(name);\n\n  const user = await Model.findOne({ slug: origSlug, ...filter }, 'id');\n\n  if (!user) {\n    return origSlug;\n  }\n\n  return createUniqueSlug(Model, origSlug, 1);\n};\nconst isValidateEmail = (email) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\nconst ucFirst = (string) => string.charAt(0).toUpperCase() + string.slice(1);\n\nmodule.exports = {\n  // Vars\n  Admin,\n  Student,\n  Buyer,\n  Roomer,\n  Active,\n  Inactive,\n  RoleList,\n  StatusList,\n  studentRoleList,\n  strategyTypeKeys,\n  buyStrategy,\n  locationStrategy,\n  guarantorStrategy,\n\n  // Methods\n  ucFirst,\n  isValidateEmail,\n  isAdmin,\n  isStudent,\n  isBuyer,\n  generateSlug,\n  isRoomer,\n};\n"]},"metadata":{},"sourceType":"script"}