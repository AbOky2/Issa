{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst Admin = 'admin';\nconst Roomer = 'roomer';\nconst Buyer = 'buyer';\nconst Student = 'student';\nconst studentRoleList = [Student, Buyer];\nconst RoleList = [Admin, ...studentRoleList]; // status\n\nconst Active = 'active';\nconst Inactive = 'inactive';\nconst StatusList = [Active, Inactive]; // Methods\n\nconst isAdmin = user => user && user.role === Admin;\n\nconst isStudent = user => user && studentRoleList.includes(user.role);\n\nconst isBuyer = user => user && user.role === Buyer;\n\nconst isRoomer = user => user && user.role === Roomer; // Other\n\n\nconst buyStrategy = 'buy';\nconst locationStrategy = 'location';\nconst guarantorStrategy = 'guarantor';\nconst strategyTypeKeys = {\n  [buyStrategy]: 'Achat',\n  [locationStrategy]: 'Location',\n  [guarantorStrategy]: 'garant'\n}; // Slug\n\nconst slugify = slug => {\n  let str = slug;\n  str = str.replace(/^\\s+|\\s+$/g, '');\n  str = str.toLowerCase();\n  const from = 'àáäâèéëêìíïîòóöôùúüûñç·/_,:;';\n  const to = 'aaaaeeeeiiiioooouuuunc------';\n\n  for (let i = 0, l = from.length; i < l; i += 1) str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\n\n  str = str.replace(/[^a-z0-9 -]/g, '').replace(/\\s+/g, '-').replace(/-+/g, '-');\n  return str;\n};\n\nconst createUniqueSlug = async (Model, slug, count) => {\n  const user = await Model.findOne({\n    slug: `${slug}-${count}`\n  }, 'id');\n  if (!user) return `${slug}-${count}`;\n  return createUniqueSlug(Model, slug, count + 1);\n};\n\nconst generateSlug = async (Model, name, filter = {}) => {\n  const origSlug = slugify(name);\n  const user = await Model.findOne(_objectSpread({\n    slug: origSlug\n  }, filter), 'id');\n\n  if (!user) {\n    return origSlug;\n  }\n\n  return createUniqueSlug(Model, origSlug, 1);\n};\n\nconst isValidateEmail = email => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n\nconst ucFirst = string => string.charAt(0).toUpperCase() + string.slice(1);\n\nmodule.exports = {\n  // Vars\n  Admin,\n  Student,\n  Buyer,\n  Roomer,\n  Active,\n  Inactive,\n  RoleList,\n  StatusList,\n  studentRoleList,\n  strategyTypeKeys,\n  buyStrategy,\n  locationStrategy,\n  guarantorStrategy,\n  // Methods\n  ucFirst,\n  isValidateEmail,\n  isAdmin,\n  isStudent,\n  isBuyer,\n  generateSlug,\n  isRoomer\n};","map":{"version":3,"sources":["/usr/src/kit-le-nid/helpers/user.js"],"names":["Admin","Roomer","Buyer","Student","studentRoleList","RoleList","Active","Inactive","StatusList","isAdmin","user","role","isStudent","includes","isBuyer","isRoomer","buyStrategy","locationStrategy","guarantorStrategy","strategyTypeKeys","slugify","slug","str","replace","toLowerCase","from","to","i","l","length","RegExp","charAt","createUniqueSlug","Model","count","findOne","generateSlug","name","filter","origSlug","isValidateEmail","email","re","test","String","ucFirst","string","toUpperCase","slice","module","exports"],"mappings":"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","sourcesContent":["const Admin = 'admin';\nconst Roomer = 'roomer';\nconst Buyer = 'buyer';\nconst Student = 'student';\nconst studentRoleList = [Student, Buyer];\nconst RoleList = [Admin, ...studentRoleList];\n\n// status\nconst Active = 'active';\nconst Inactive = 'inactive';\nconst StatusList = [Active, Inactive];\n\n// Methods\nconst isAdmin = (user) => user && user.role === Admin;\nconst isStudent = (user) => user && studentRoleList.includes(user.role);\nconst isBuyer = (user) => user && user.role === Buyer;\nconst isRoomer = (user) => user && user.role === Roomer;\n\n// Other\nconst buyStrategy = 'buy';\nconst locationStrategy = 'location';\nconst guarantorStrategy = 'guarantor';\nconst strategyTypeKeys = {\n  [buyStrategy]: 'Achat',\n  [locationStrategy]: 'Location',\n  [guarantorStrategy]: 'garant',\n};\n// Slug\nconst slugify = (slug) => {\n  let str = slug;\n\n  str = str.replace(/^\\s+|\\s+$/g, '');\n  str = str.toLowerCase();\n\n  const from = 'àáäâèéëêìíïîòóöôùúüûñç·/_,:;';\n  const to = 'aaaaeeeeiiiioooouuuunc------';\n\n  for (let i = 0, l = from.length; i < l; i += 1)\n    str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\n\n  str = str\n    .replace(/[^a-z0-9 -]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-');\n\n  return str;\n};\n\nconst createUniqueSlug = async (Model, slug, count) => {\n  const user = await Model.findOne({ slug: `${slug}-${count}` }, 'id');\n\n  if (!user) return `${slug}-${count}`;\n\n  return createUniqueSlug(Model, slug, count + 1);\n};\n\nconst generateSlug = async (Model, name, filter = {}) => {\n  const origSlug = slugify(name);\n\n  const user = await Model.findOne({ slug: origSlug, ...filter }, 'id');\n\n  if (!user) {\n    return origSlug;\n  }\n\n  return createUniqueSlug(Model, origSlug, 1);\n};\nconst isValidateEmail = (email) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\nconst ucFirst = (string) => string.charAt(0).toUpperCase() + string.slice(1);\n\nmodule.exports = {\n  // Vars\n  Admin,\n  Student,\n  Buyer,\n  Roomer,\n  Active,\n  Inactive,\n  RoleList,\n  StatusList,\n  studentRoleList,\n  strategyTypeKeys,\n  buyStrategy,\n  locationStrategy,\n  guarantorStrategy,\n\n  // Methods\n  ucFirst,\n  isValidateEmail,\n  isAdmin,\n  isStudent,\n  isBuyer,\n  generateSlug,\n  isRoomer,\n};\n"]},"metadata":{},"sourceType":"script"}