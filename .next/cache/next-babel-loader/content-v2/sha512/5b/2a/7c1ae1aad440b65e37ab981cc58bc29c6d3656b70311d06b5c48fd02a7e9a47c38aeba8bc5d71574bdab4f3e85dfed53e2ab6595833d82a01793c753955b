{"ast":null,"code":"import _regeneratorRuntime from \"/usr/src/kit-le-nid/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/usr/src/kit-le-nid/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/usr/src/kit-le-nid/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport 'isomorphic-unfetch';\n\nvar _require = require('../../config'),\n    ROOT_URL = _require.ROOT_URL;\n\nexport default function sendRequest(_x) {\n  return _sendRequest.apply(this, arguments);\n}\n\nfunction _sendRequest() {\n  _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var options,\n        extra,\n        headers,\n        response,\n        data,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            extra = _args.length > 2 ? _args[2] : undefined;\n            headers = _objectSpread(_objectSpread({}, options.headers || {}), extra ? {} : {\n              'Content-type': 'application/json; charset=UTF-8'\n            });\n            _context.next = 5;\n            return fetch(\"\".concat(ROOT_URL).concat(path), _objectSpread(_objectSpread({\n              method: 'POST',\n              credentials: 'same-origin'\n            }, options), {}, {\n              headers: headers\n            }));\n\n          case 5:\n            response = _context.sent;\n            _context.prev = 6;\n            _context.next = 9;\n            return response.json();\n\n          case 9:\n            data = _context.sent;\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](6);\n            throw new Error(_context.t0);\n\n          case 15:\n            return _context.abrupt(\"return\", data);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 12]]);\n  }));\n  return _sendRequest.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}