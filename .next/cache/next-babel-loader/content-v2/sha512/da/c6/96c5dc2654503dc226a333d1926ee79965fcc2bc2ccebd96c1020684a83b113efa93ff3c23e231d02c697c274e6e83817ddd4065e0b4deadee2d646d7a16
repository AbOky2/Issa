{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Grid, Typography } from '@material-ui/core';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\nimport { Icon } from '.';\nimport Btn from './Btn';\nconst useStyles = makeStyles({\n  container: {\n    padding: '4rem 10rem'\n  },\n  close: {\n    position: 'absolute',\n    top: 35,\n    right: 35,\n    cursor: 'pointer'\n  },\n  contentContainer: {\n    display: 'inline-block',\n    width: '100%',\n    margin: '0 auto 1rem',\n    padding: '4rem 0 5rem',\n    borderBottom: '1px solid #C1CDE7'\n  },\n  btnContainer: {\n    marginTop: 30,\n    '& > div:first-of-type': {\n      paddingRight: 11,\n      '& div': {\n        marginLeft: 'auto'\n      }\n    },\n    '& > div:last-of-type': {\n      paddingLeft: 11\n    }\n  }\n});\n\nconst Modal = (_ref) => {\n  let {\n    children,\n    openModal,\n    onClose,\n    title,\n    showActions = true,\n    onClick,\n    confirmText = 'Confirmer'\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"openModal\", \"onClose\", \"title\", \"showActions\", \"onClick\", \"confirmText\"]);\n\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const classes = useStyles();\n  return __jsx(Dialog, _extends({\n    fullScreen: fullScreen,\n    open: openModal,\n    onClose: onClose,\n    \"aria-labelledby\": \"responsive-dialog-title\",\n    disableBackdropClick: true,\n    fullWidth: true,\n    overlaystyle: {\n      background: `linear-gradient(109.69deg, rgba(204, 149, 223, 0.3) 6.69%,\n          rgba(79, 128, 255, 0.3) 63.14%)`\n    },\n    maxWidth: \"lg\"\n  }, props), __jsx(\"div\", {\n    className: classes.close,\n    onClick: onClose\n  }, __jsx(Icon, {\n    type: \"close\"\n  })), __jsx(\"div\", {\n    className: classes.container\n  }, title ? __jsx(Typography, {\n    variant: \"h2\",\n    className: \"text-center\"\n  }, title) : '', __jsx(\"div\", {\n    className: classes.contentContainer\n  }, children), showActions && __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    className: classes.btnContainer\n  }, __jsx(Grid, {\n    item: true,\n    md: 6\n  }, __jsx(Btn, {\n    text: \"Annuler\",\n    whiteColor: true,\n    onClick: onClose\n  })), __jsx(Grid, {\n    item: true,\n    md: 6\n  }, __jsx(Btn, {\n    text: confirmText,\n    onClick: onClick\n  })))));\n};\n\nModal.defaultProps = {\n  title: '',\n  openModal: false,\n  showActions: true,\n  confirmText: 'Confirmer'\n};\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}