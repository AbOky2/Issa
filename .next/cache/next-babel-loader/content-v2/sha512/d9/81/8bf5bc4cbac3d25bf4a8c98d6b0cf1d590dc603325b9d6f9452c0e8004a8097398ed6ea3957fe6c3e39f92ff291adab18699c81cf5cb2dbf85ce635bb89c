{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport sendRequest from './sendRequest';\nconst BASE_PATH = '/api/v1/customer';\nexport const getPartnersApiMethod = (options = {}) => sendRequest(`${BASE_PATH}/partners`, _objectSpread({\n  method: 'GET'\n}, options));\nexport const getCurrentUserkApiMethod = (options = {}) => sendRequest(`${BASE_PATH}/currentUser`, _objectSpread({\n  method: 'GET'\n}, options));\nexport const getPropertiesApiMethod = (options = {}) => sendRequest(`${BASE_PATH}/properties`, _objectSpread({\n  method: 'GET'\n}, options));\nexport const getUserSearchApiMethod = args => sendRequest(`${BASE_PATH}/search`, {\n  body: JSON.stringify(args)\n});\nexport const addBookmarkApiMethod = args => sendRequest(`${BASE_PATH}/bookmark`, {\n  body: JSON.stringify(args)\n});\nexport const getPartnerApiMethod = (id, options = {}) => sendRequest(`${BASE_PATH}/partner/${id}`, _objectSpread({\n  method: 'GET'\n}, options));\nexport const getPropertyApiMethod = (id, options = {}) => sendRequest(`${BASE_PATH}/property/${id}`, _objectSpread({\n  method: 'GET'\n}, options));\nexport const fetchCheckoutSessionApiMethod = ({\n  bookId,\n  redirectUrl\n}) => sendRequest(`${BASE_PATH}/stripe/fetch-checkout-session`, {\n  body: JSON.stringify({\n    bookId,\n    redirectUrl\n  })\n});\nexport const getMyBookListApiMethod = (options = {}) => sendRequest(`${BASE_PATH}/my-books`, _objectSpread({\n  method: 'GET'\n}, options));","map":null,"metadata":{},"sourceType":"module"}